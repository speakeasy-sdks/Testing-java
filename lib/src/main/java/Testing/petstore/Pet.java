/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package Testing.petstore;

import Testing.petstore.utils.HTTPClient;
import Testing.petstore.utils.HTTPRequest;
import Testing.petstore.utils.JSON;
import Testing.petstore.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;

/**
 * Everything about your Pets
 * http://swagger.io - Find out more
 */
public class Pet {
	
	private SDKConfiguration sdkConfiguration;

	public Pet(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.AddPetFormResponse addPetForm(Testing.petstore.models.shared.Pet request, Testing.petstore.models.operations.AddPetFormSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.AddPetFormResponse res = new Testing.petstore.models.operations.AddPetFormResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.AddPetJsonResponse addPetJson(Testing.petstore.models.shared.Pet request, Testing.petstore.models.operations.AddPetJsonSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.AddPetJsonResponse res = new Testing.petstore.models.operations.AddPetJsonResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.AddPetRawResponse addPetRaw(byte[] request, Testing.petstore.models.operations.AddPetRawSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.AddPetRawResponse res = new Testing.petstore.models.operations.AddPetRawResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Deletes a pet
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.DeletePetResponse deletePet(Testing.petstore.models.operations.DeletePetRequest request, Testing.petstore.models.operations.DeletePetSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(Testing.petstore.models.operations.DeletePetRequest.class, baseUrl, "/pet/{petId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        java.util.Map<String, java.util.List<String>> headers = Testing.petstore.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.DeletePetResponse res = new Testing.petstore.models.operations.DeletePetResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.FindPetsByStatusResponse findPetsByStatus(Testing.petstore.models.operations.FindPetsByStatusRequest request, Testing.petstore.models.operations.FindPetsByStatusSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet/findByStatus");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        java.util.List<NameValuePair> queryParams = Testing.petstore.utils.Utils.getQueryParams(Testing.petstore.models.operations.FindPetsByStatusRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.FindPetsByStatusResponse res = new Testing.petstore.models.operations.FindPetsByStatusResponse(contentType, httpRes.statusCode()) {{
            pets = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet[].class);
                res.pets = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.FindPetsByTagsResponse findPetsByTags(Testing.petstore.models.operations.FindPetsByTagsRequest request, Testing.petstore.models.operations.FindPetsByTagsSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet/findByTags");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        java.util.List<NameValuePair> queryParams = Testing.petstore.utils.Utils.getQueryParams(Testing.petstore.models.operations.FindPetsByTagsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.FindPetsByTagsResponse res = new Testing.petstore.models.operations.FindPetsByTagsResponse(contentType, httpRes.statusCode()) {{
            pets = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet[].class);
                res.pets = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Find pet by ID
     * Returns a single pet
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.GetPetByIdResponse getPetById(Testing.petstore.models.operations.GetPetByIdRequest request, Testing.petstore.models.operations.GetPetByIdSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(Testing.petstore.models.operations.GetPetByIdRequest.class, baseUrl, "/pet/{petId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.GetPetByIdResponse res = new Testing.petstore.models.operations.GetPetByIdResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Updates a pet in the store with form data
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.UpdatePetWithFormResponse updatePetWithForm(Testing.petstore.models.operations.UpdatePetWithFormRequest request, Testing.petstore.models.operations.UpdatePetWithFormSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(Testing.petstore.models.operations.UpdatePetWithFormRequest.class, baseUrl, "/pet/{petId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        java.util.List<NameValuePair> queryParams = Testing.petstore.utils.Utils.getQueryParams(Testing.petstore.models.operations.UpdatePetWithFormRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.UpdatePetWithFormResponse res = new Testing.petstore.models.operations.UpdatePetWithFormResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.UpdatePetFormResponse updatePetForm(Testing.petstore.models.shared.Pet request, Testing.petstore.models.operations.UpdatePetFormSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.UpdatePetFormResponse res = new Testing.petstore.models.operations.UpdatePetFormResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.UpdatePetJsonResponse updatePetJson(Testing.petstore.models.shared.Pet request, Testing.petstore.models.operations.UpdatePetJsonSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.UpdatePetJsonResponse res = new Testing.petstore.models.operations.UpdatePetJsonResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.UpdatePetRawResponse updatePetRaw(byte[] request, Testing.petstore.models.operations.UpdatePetRawSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json;q=1, application/xml;q=0");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.UpdatePetRawResponse res = new Testing.petstore.models.operations.UpdatePetRawResponse(contentType, httpRes.statusCode()) {{
            pet = null;
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.Pet.class);
                res.pet = out;
            }
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/xml")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * uploads an image
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public Testing.petstore.models.operations.UploadFileResponse uploadFile(Testing.petstore.models.operations.UploadFileRequest request, Testing.petstore.models.operations.UploadFileSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = Testing.petstore.utils.Utils.generateURL(Testing.petstore.models.operations.UploadFileRequest.class, baseUrl, "/pet/{petId}/uploadImage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = Testing.petstore.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion));
        java.util.List<NameValuePair> queryParams = Testing.petstore.utils.Utils.getQueryParams(Testing.petstore.models.operations.UploadFileRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = Testing.petstore.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        Testing.petstore.models.operations.UploadFileResponse res = new Testing.petstore.models.operations.UploadFileResponse(contentType, httpRes.statusCode()) {{
            apiResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (Testing.petstore.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Testing.petstore.models.shared.ApiResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Testing.petstore.models.shared.ApiResponse.class);
                res.apiResponse = out;
            }
        }

        return res;
    }
}